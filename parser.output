Terminals unused in grammar

    AMP
    ASGN
    BANG
    COLON
    COMMA
    DAMP
    DBAR
    DIV
    DOT
    EQ
    GE
    GT
    LBRACK
    LE
    LPAREN
    LT
    MINUS
    NE
    PLUS
    RBRACK
    RPAREN
    SEMI
    STAR
    ARRAY
    BEGINN
    BOOL
    ELSE
    ELIF
    END
    FALSE
    FOR
    FLOAT
    FUNCTION
    IF
    IN
    INT
    OF
    PROCEDURE
    READ
    RECORD
    RETURN
    THEN
    TRUE
    WHILE
    WRITE
    FCONST
    ICONST
    IDENT
    SCONST
    STATEMENT


Grammar

    0 $accept: program $end

    1 program: PROGRAM


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    AMP (258)
    ASGN (259)
    BANG (260)
    COLON (261)
    COMMA (262)
    DAMP (263)
    DBAR (264)
    DIV (265)
    DOT (266)
    EQ (267)
    GE (268)
    GT (269)
    LBRACK (270)
    LE (271)
    LPAREN (272)
    LT (273)
    MINUS (274)
    NE (275)
    PLUS (276)
    RBRACK (277)
    RPAREN (278)
    SEMI (279)
    STAR (280)
    ARRAY (281)
    BEGINN (282)
    BOOL (283)
    ELSE (284)
    ELIF (285)
    END (286)
    FALSE (287)
    FOR (288)
    FLOAT (289)
    FUNCTION (290)
    IF (291)
    IN (292)
    INT (293)
    OF (294)
    PROCEDURE (295)
    PROGRAM (296) 1
    READ (297)
    RECORD (298)
    RETURN (299)
    THEN (300)
    TRUE (301)
    WHILE (302)
    WRITE (303)
    FCONST (304)
    ICONST (305)
    IDENT (306)
    SCONST (307)
    STATEMENT (308)


Nonterminals, with rules where they appear

    $accept (54)
        on left: 0
    program (55)
        on left: 1
        on right: 0


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM .

    $default  reduce using rule 1 (program)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 3


State 3

    0 $accept: program $end .

    $default  accept
